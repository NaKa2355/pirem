// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: plugin/v1/device_plugin.proto

package v1

import (
	context "context"
	v1 "github.com/NaKa2355/pirem/gen/apirem/v1"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevicePluginServiceClient is the client API for DevicePluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicePluginServiceClient interface {
	SendRawIr(ctx context.Context, in *v1.RawIrData, opts ...grpc.CallOption) (*empty.Empty, error)
	ReceiveRawIr(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.RawIrData, error)
	GetDeviceInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.DeviceInfo, error)
	GetDeviceStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.DeviceStatus, error)
	IsBusy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsBusyResponse, error)
	Init(ctx context.Context, in *DeviceConfig, opts ...grpc.CallOption) (*empty.Empty, error)
}

type devicePluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicePluginServiceClient(cc grpc.ClientConnInterface) DevicePluginServiceClient {
	return &devicePluginServiceClient{cc}
}

func (c *devicePluginServiceClient) SendRawIr(ctx context.Context, in *v1.RawIrData, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/plugin.DevicePluginService/SendRawIr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicePluginServiceClient) ReceiveRawIr(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.RawIrData, error) {
	out := new(v1.RawIrData)
	err := c.cc.Invoke(ctx, "/plugin.DevicePluginService/ReceiveRawIr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicePluginServiceClient) GetDeviceInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.DeviceInfo, error) {
	out := new(v1.DeviceInfo)
	err := c.cc.Invoke(ctx, "/plugin.DevicePluginService/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicePluginServiceClient) GetDeviceStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*v1.DeviceStatus, error) {
	out := new(v1.DeviceStatus)
	err := c.cc.Invoke(ctx, "/plugin.DevicePluginService/GetDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicePluginServiceClient) IsBusy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsBusyResponse, error) {
	out := new(IsBusyResponse)
	err := c.cc.Invoke(ctx, "/plugin.DevicePluginService/IsBusy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicePluginServiceClient) Init(ctx context.Context, in *DeviceConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/plugin.DevicePluginService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicePluginServiceServer is the server API for DevicePluginService service.
// All implementations must embed UnimplementedDevicePluginServiceServer
// for forward compatibility
type DevicePluginServiceServer interface {
	SendRawIr(context.Context, *v1.RawIrData) (*empty.Empty, error)
	ReceiveRawIr(context.Context, *empty.Empty) (*v1.RawIrData, error)
	GetDeviceInfo(context.Context, *empty.Empty) (*v1.DeviceInfo, error)
	GetDeviceStatus(context.Context, *empty.Empty) (*v1.DeviceStatus, error)
	IsBusy(context.Context, *empty.Empty) (*IsBusyResponse, error)
	Init(context.Context, *DeviceConfig) (*empty.Empty, error)
	mustEmbedUnimplementedDevicePluginServiceServer()
}

// UnimplementedDevicePluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDevicePluginServiceServer struct {
}

func (UnimplementedDevicePluginServiceServer) SendRawIr(context.Context, *v1.RawIrData) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawIr not implemented")
}
func (UnimplementedDevicePluginServiceServer) ReceiveRawIr(context.Context, *empty.Empty) (*v1.RawIrData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRawIr not implemented")
}
func (UnimplementedDevicePluginServiceServer) GetDeviceInfo(context.Context, *empty.Empty) (*v1.DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedDevicePluginServiceServer) GetDeviceStatus(context.Context, *empty.Empty) (*v1.DeviceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}
func (UnimplementedDevicePluginServiceServer) IsBusy(context.Context, *empty.Empty) (*IsBusyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBusy not implemented")
}
func (UnimplementedDevicePluginServiceServer) Init(context.Context, *DeviceConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedDevicePluginServiceServer) mustEmbedUnimplementedDevicePluginServiceServer() {}

// UnsafeDevicePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicePluginServiceServer will
// result in compilation errors.
type UnsafeDevicePluginServiceServer interface {
	mustEmbedUnimplementedDevicePluginServiceServer()
}

func RegisterDevicePluginServiceServer(s grpc.ServiceRegistrar, srv DevicePluginServiceServer) {
	s.RegisterService(&DevicePluginService_ServiceDesc, srv)
}

func _DevicePluginService_SendRawIr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RawIrData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePluginServiceServer).SendRawIr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.DevicePluginService/SendRawIr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePluginServiceServer).SendRawIr(ctx, req.(*v1.RawIrData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicePluginService_ReceiveRawIr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePluginServiceServer).ReceiveRawIr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.DevicePluginService/ReceiveRawIr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePluginServiceServer).ReceiveRawIr(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicePluginService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePluginServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.DevicePluginService/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePluginServiceServer).GetDeviceInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicePluginService_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePluginServiceServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.DevicePluginService/GetDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePluginServiceServer).GetDeviceStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicePluginService_IsBusy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePluginServiceServer).IsBusy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.DevicePluginService/IsBusy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePluginServiceServer).IsBusy(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicePluginService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicePluginServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.DevicePluginService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicePluginServiceServer).Init(ctx, req.(*DeviceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// DevicePluginService_ServiceDesc is the grpc.ServiceDesc for DevicePluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevicePluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.DevicePluginService",
	HandlerType: (*DevicePluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRawIr",
			Handler:    _DevicePluginService_SendRawIr_Handler,
		},
		{
			MethodName: "ReceiveRawIr",
			Handler:    _DevicePluginService_ReceiveRawIr_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _DevicePluginService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "GetDeviceStatus",
			Handler:    _DevicePluginService_GetDeviceStatus_Handler,
		},
		{
			MethodName: "IsBusy",
			Handler:    _DevicePluginService_IsBusy_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _DevicePluginService_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/v1/device_plugin.proto",
}
